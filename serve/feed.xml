<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Shashank Shekhar</title>
		<description>Blog of Shashank Shekhar. Categorical opinions expressed are mine.</description>
		<link>https://sskhrnwbie.github.io</link>
		<atom:link href="https://sskhrnwbie.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Creating a Tor Hidden Service</title>
				
				
					<description>Let's talk about Tor!

I will not spend time on why Tor is changing and saving lives, because there
are already so many stories &lt;a href=&quot;https://www.torproject.org/about/torusers.html.en&quot; target=&quot;_blank&quot;&gt;reported&lt;/a&gt;
about this. I will just say that Tor is a tool, just like a screwdriver is a tool.
And screwdrivers can be used for screwing screws, but also for hurting people.
Would you ban screwdrivers?

A &lt;a href=&quot;https://www.torproject.org/docs/hidden-services.html.en&quot; target=&quot;_blank&quot;&gt;Tor hidden service&lt;/a&gt;
is any web service, accessible only from within Tor.
So any tricks that you know already about the web, they apply for the tor hidden services.
All you have to do, is to just replace the service url with the onion address.

First of all, you will need &lt;a href=&quot;https://www.torproject.org/docs/installguide.html.en&quot; target=&quot;_blank&quot;&gt;Tor&lt;/a&gt;.
Then you have to declare the path where you want to place your service's private and public keys
and its listening port in the torrc configuration file:

&lt;pre style=&quot;text-align: left&quot;&gt;
HiddenServiceDir /home/username/hidden-service/
HiddenServicePort 80 127.0.0.1:4000
&lt;/pre&gt;

Restart the tor service and you will find your service's onion address (public key) in HiddenServiceDir/hostname.

&lt;small&gt;Note the obvious, that if someone gets his hands on your private key, then he becomes you, your hidden service.&lt;/small&gt;

Fire up a &lt;a href=&quot;https://www.torproject.org/projects/torbrowser.html.en&quot; target=&quot;_blank&quot;&gt;
Tor browser&lt;/a&gt;, paste the onion address and you are live!

The only thing you should be worried except from &lt;a href=&quot;https://www.youtube.com/watch?v=7G1LjQSYM5Q&quot; target=&quot;_blank&quot;&gt;giving away&lt;/a&gt;
 your Personal Identifiable Information due to human error, is that the speculations about NSA decrypting TLS were
&lt;a href=&quot;https://www.schneier.com/blog/archives/2015/05/the_logjam_and_.html&quot; target=&quot;_blank&quot;&gt;true&lt;/a&gt;.

P.S.: Don't forget to use your hidden service over https (https://service-public-key.onion), in order for the traffic to be encrypted from the Tor exit node.
</description>
				
				<pubDate>Sun, 18 Oct 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/10/18/tor-hidden-services.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/10/18/tor-hidden-services.html</guid>
			</item>
		
			<item>
				<title>Arduino Reset Hack </title>
				
				
					<description>Arduino is great for hardware prototyping and for hobbyists but hardware runs software and every software once in a while needs magic &quot;self-recovery&quot;, which practically is a reboot.

But, the common way of resetting your Arduino is by wiring a special pin and then sending 5 Volts to it.
This means that if you want to make your Arduino reset-able (which you will always will), then you sacrifice one pin.
A pin that its lack could ruin the size of your project, because if you run out of pins on the board you have to get a bigger one.

So, I needed one pin, and instead of rushing into buying a bigger board, I found a way to reset it from the software:

&lt;script src=&quot;https://gist.github.com/PanosSakkos/7766479.js&quot;&gt;&lt;/script&gt;

Very straightforward, and I don't see any caveats so far ðŸ˜Š.

Also, like it was pointed out on reddit, you can do cool stuff like resetting remotely your board!

P.S: Mads found &lt;a href=&quot;https://www.atmel.com/webdoc/AVRLibcReferenceManual/FAQ_1faq_softreset.html&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;, so test it in case you are using an new AVR
</description>
				
				<pubDate>Sun, 27 Sep 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/09/27/arduino-reset.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/09/27/arduino-reset.html</guid>
			</item>
		
			<item>
				<title>Linux Kernel Security Suite</title>
				
				
					<description>Rootkits.
A word that gives whitehats goosebumps and makes sys admins cry in their &lt;a href=&quot;https://www.youtube.com/watch?v=QhBr0lPNuuU&quot; target=&quot;_blank&quot;&gt;shower&lt;/a&gt;.
In a nutshell, rootkits are binaries that are executed in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Protection_ring&quot; target=&quot;_blank&quot;&gt;kernel&lt;/a&gt; of the OS, which practically means they are a God and your machine is their pet.
Of course in order to add a rootkit in the kernel you need root permissions, but social engineering and 0-days make this two or three pieces of cake.

Let's see what a typical rootkit will do:

&lt;ol&gt;
  &lt;li&gt;Hide files.&lt;/li&gt;
  &lt;li&gt;Hide processes.&lt;/li&gt;
  &lt;li&gt;Install malicious software (and nobody will notice because of 1 and 2 ðŸ˜Š ).&lt;/li&gt;
  &lt;li&gt;Steal certificates and passwords.&lt;/li&gt;
  &lt;li&gt;Log all the activity of your machine.&lt;/li&gt;
&lt;/ol&gt;

All of the above are realized by altering the system call table.
Scary stuff, right?
In &lt;a href=&quot;https://www.imdb.com/title/tt4158110/?ref_=nv_sr_1&quot; target=&quot;_blank&quot;&gt;Mr. Robot&lt;/a&gt; rootkits are described as

 &gt; A crazy serial rapist with a very big dick.

There are ways to protect yourself from them, but of course it's a mouse and cat game that never ends.

A few years ago my job was to protect linux servers from rootkits and later I kept digging deeper as a hobby, and it's about time to open source this work.

The suite includes the following (whitehat) rootkits:

## The Drip Dry Carbonite

Protects the system call table.
In case of an attempt of modifying it, snapshots of the processes running in the system are logged remotely and the machine gets frozen &lt;small&gt;(that's why it's called Carbonite)&lt;/small&gt;.

## Dresden

Blocks all the attempts to insert rootkits in the kernel, dumps their instruction memory and logs a critical message.

## Netlog

Logs all network communication by probing the inet stack of the kernel.

In the future I will post about some interesting snippets of the source code.
The repo lives &lt;a href=&quot;https://github.com/PanosSakkos/linux-kernel-security-suite&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and don't forget to star.

&lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=panossakkos&amp;repo=linux-kernel-security-suite&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;160px&quot; height=&quot;30px&quot;&gt;&lt;/iframe&gt;

&lt;br&gt;&lt;br&gt;
</description>
				
				<pubDate>Sat, 29 Aug 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/08/29/linux-kernel-security-suite.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/08/29/linux-kernel-security-suite.html</guid>
			</item>
		
			<item>
				<title>Ad Hell</title>
				
				
					<description>I never click on ads, because I don't see any value in them.
During the last ten years I clicked (intentionally) on literally one ad from a &lt;a href=&quot;https://bellroy.com/&quot; target=&quot;_blank&quot;&gt;wallet company&lt;/a&gt;.
But, this company would be also my first result in my  (incognito) &lt;a href=&quot;https://www.google.no/?gfe_rd=cr&amp;ei=4saeVZ7KE6qr8we3woDICA#q=slim+card+wallet&quot; target=&quot;_blank&quot;&gt;Google search&lt;/a&gt;.
And I was actually planning to buy a slim card wallet, I didn't start googling because of the ad.
So, did I buy the product of the ad?
Yes.
Did the ad convince me to buy the product?
No.
An image of a product with a catchy phrase will never convince me to buy it.
I want to do my research and evaluate my options before buying anything.
After I evaluated a few of the &quot;slim card wallets&quot; Google results, I chose the one from the ad, for specific reasons, irrelevant to the displayed ad.
3650 days, 1 intentionally clicked ad, 0 value, &lt;a href=&quot;https://www.wolframalpha.com/input/?i=3650+*+3+%2F+%2860+*+60%29&quot; target=&quot;_blank&quot;&gt;3&lt;/a&gt; hours of my life so far wasted on closing tabs from ads that I clicked by mistake.
This is clearly a broken experience of the web.

Have you tried to browse the web with &lt;a href=&quot;https://adblockplus.org/&quot; target=&quot;_blank&quot;&gt;AdBlock&lt;/a&gt;?
The web is just beautiful without ads.
The fact that Google &lt;a href=&quot;https://adblockplus.org/blog/adblock-plus-for-android-removed-from-google-play-store&quot; target=&quot;_blank&quot;&gt;removed&lt;/a&gt; it from Play store,
indicates that it caught their attention, which means that there is a significant number of people who vouch for an ad-less web.
Ads are killing the UX and make products look cheap.

&lt;a href=&quot;https://www.statista.com/statistics/266249/advertising-revenue-of-google/&quot; target=&quot;_blank&quot;&gt;90%&lt;/a&gt; of Google's revenues come from ads,
and this makes them really aggressive.
YouTube is frustrating its users by forcing them to watch an ad before watching their video.
And until recently, Google was placing an ad at exactly the same point where the first search result was normally, but with a latency in its rendering.
As a result, I was clicking one ad on every search for several days (muscle memory).
I'm pretty sure that they made a ton of money from this hack, but they just broke even more their UX.

Microsoft has started adding ads in its products.
Skype is wasting my pixels and my battery on ads and I was really disappointed when I &lt;a href=&quot;https://www.theverge.com/2015/4/29/8514345/windows-spotlight-lock-screen-with-ads&quot; target=&quot;_blank&quot;&gt;read&lt;/a&gt; about (optionally) displaying app ads on the lockscreen of Windows 10.
Facebook has also ads, but at least they don't display them at their Messenger, WhatsApp and Instagram apps.
On the other hand, I haven't seen any ads in Apple products.
This is what I would do in any of my products.
But someone could argue that offering an ad-free paid version of it, is a better option.
This is a trend coming from smartphone apps which was also adopted by Amazon at their Kindle series,
by offering a cheaper model stuffed with ads, next to their normal model.

If you really care about delivering a delightful experience, then you shouldn't bundle any ads to it, or at least you should compromise with the opt-in/out model.
Make your users love your product so much, that they would pay for it, like Apple, Spotify and many more companies did.
Don't forget that WhatsApp's and Instagram's value was defined by their enormous user base.
Which means that until the &lt;a href=&quot;https://www.name.com/blog/general/business/2013/10/why-are-startups-turning-to-io/&quot; target=&quot;_blank&quot;&gt;io&lt;/a&gt; bubble bursts, you can stick to a totally free of charge service, with the hope of grooming a few millions of users.
And if your users don't love your product enough to pay for it, don't blame them.
Blame yourself and improve the experience that you offer.

P.S.: How to &lt;a href=&quot;https://www.reddit.com/r/LifeProTips/comments/27dihm/lpt_you_can_turn_off_the_annoying_skype_banner/&quot; target=&quot;_blank&quot;&gt;disable&lt;/a&gt; Skype ads.

P.P.S.: Olivia pointed out &quot;Technically, in any 10 year interval there would have been 2 leap years, therefore 3,652 days&quot;
</description>
				
				<pubDate>Sat, 11 Jul 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/07/11/ads.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/07/11/ads.html</guid>
			</item>
		
			<item>
				<title>{ Personal } Jekyll Theme</title>
				
				
					<description>As I &lt;a href=&quot;https://panossakkos.github.io/tech/2015/06/27/blogging-like-a-hacker.html&quot; target=&quot;_blank&quot;&gt;wrote&lt;/a&gt; before,
I wanted to open-source the current theme because I believe that it adds value to the existing Jekyll themes.
Also, I feel that I owe it back to the community, because without the existing code that I forked, I would never have the current blog.
And I love this blog.

The value of *{ Personal }* is that it enables blogging in the &lt;a href=&quot;https://kirbyt.github.io/timeline-jekyll-theme/&quot; target=&quot;_blank&quot;&gt;Timeline&lt;/a&gt; theme
(which is a mashup of the popular &lt;a href=&quot;https://y7kim.github.io/agency-jekyll-theme/&quot; target=&quot;_blank&quot;&gt;Agency&lt;/a&gt; and &lt;a href=&quot;https://ironsummitmedia.github.io/startbootstrap-grayscale/&quot; target=&quot;_blank&quot;&gt;Grayscale&lt;/a&gt; themes),
it personalizes more the theme by focusing on its owner,
it makes it easy to customize the website from Jekyll's config and it offers a cool &lt;a href=&quot;https://panossakkos.github.io/404.html&quot; target=&quot;_blank&quot;&gt;404&lt;/a&gt; page.

The visual touches that I believe that make the theme a bit more personal,
is the owner's picture in the home page, and the blurred background, because it forces the eye to focus on the owner's photo.
Moreover, Grayscale's neutral glyphicon of the header is replaced by a black and white version of the favicon.

The repo lives &lt;a href=&quot;https://github.com/PanosSakkos/personal-jekyll-theme&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and it's under &lt;a href=&quot;https://github.com/mattvh/jekyllthemes/pull/134&quot; target=&quot;_blank&quot;&gt;pull request&lt;/a&gt; for &lt;a href=&quot;https://jekyllthemes.org/&quot; target=&quot;_blank&quot;&gt;Jekyll Themes&lt;/a&gt; and indexed in Jekyll's themes &lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Themes&quot; target=&quot;_blank&quot;&gt;wiki&lt;/a&gt;.

Of course, the theme will evolve over the time and as soon as time permits, the blog will support discovery with hashtags.

Don't forget to support the repo by starring it ðŸ˜‰

&lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=panossakkos&amp;repo=personal-jekyll-theme&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;160px&quot; height=&quot;30px&quot;&gt;&lt;/iframe&gt;

&lt;br&gt;&lt;br&gt;
</description>
				
				<pubDate>Sun, 05 Jul 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/07/05/personal-jekyll-theme.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/07/05/personal-jekyll-theme.html</guid>
			</item>
		
			<item>
				<title>Assembling a 3D Printer</title>
				
				
					<description>A few weeks ago the Garage team of my office got a little present, a&lt;strike&gt;n IKEA&lt;/strike&gt; &lt;a href=&quot;https://www.vertex3dprinter.eu/&quot; target=&quot;_blank&quot;&gt;DIY 3D printer&lt;/a&gt;.
It was zillions of bolts, nuts, wires, motors, rods and tiny plastic pieces which I couldn't imagine that they could assemble a 3D printer.
I panicked, believing that we will miss a piece and everything will collapse in front of us.
Whenever I have dealt with hardware so far, I was always frightened.
You don't call methods, you screw bolts, and they have to be screwed properly, not too tight and not too loose.
It's not uncommon that testing will not be applicable.
You will assemble, hit a big button and if every component works, then you call it a day.
You can't copy-paste hardware, you don't have &lt;strike&gt;a versioning control system&lt;/strike&gt; git to undo steps in an instance,
you are on your own and mistakes can literally make your project fall apart.
And on top of these, we shouldn't touch the rods with bare hands, because they would corrode.
Hardware always made me feel nervous and from the point of creating personal pet-projects,
suddenly I had to collaborate with others in order to build a pyramid.
It was the similar feeling that you get when you start at your first job after finishing your studies.

My &lt;a href=&quot;https://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html&quot; target=&quot;_blank&quot;&gt;panic monster&lt;/a&gt; instructed me immediately to sort all the numbered bags per category (bolts, nuts and miscellaneous) in order to access them efficiently.
Like a real life index, which proved to be valuable during the first hours.
We broke down the project into a few independent branches and started following the respective instructions.
These instructions were practically our software spec equivalents in our new hardware world.
They were very detailed and with plenty of images, which made you wish all the software specs to be like these.
Because you knew exactly what you had to do.
As a result, the only way you could introduce a bug, was by missing a step of the instructions or misunderstanding one.
As you can imagine, we missed and misread steps and we realized our mistakes during each individual integration.
Just like in the software world.
The very first mistake that we discovered was when trying to mount the control board on the box.
The bottom side of the box was not placed in the correct orientation, which blocked the card reader of the board.
The result of this?
We spent 45 minutes of unscrewing and screwing more than 60 bolts and nuts.
We made 5 more mistakes, which most of them happened because we were tired (the first session lasted 12.5 hours, following a full working day).
Every one of them cost us time (in the order of half-hours) but also mentally, because we had to take several steps back in order to make one correct step forward.
For the later cost, the most expensive mistake was when just before the end, we realized that 4 nuts were missing from the &lt;a href=&quot;https://manuals.velleman.eu/article.php?id=17&quot; target=&quot;_blank&quot;&gt;belt clamps&lt;/a&gt;.
In this case we had to unmount the whole printer head in order to fix them  and this process took us one more session of 3 hours.
One good habit which prevented us from introducing more bugs was that we &lt;strike&gt;code&lt;/strike&gt; hardware-reviewed each other.
We didn't keep this safety net during the whole process, it was happening organically when we were taking breaks.

Summarizing,

&lt;ul class=&quot;personal-list&quot;&gt;
 &lt;li&gt;Being organized is useful and it will probably prevent a few bugs.&lt;/li&gt;
 &lt;li&gt;Even if you have the perfect spec, you will introduce bugs.&lt;/li&gt;
 &lt;li&gt;The more careful you are, the less bugs you will introduce and the more tired you are, the less careful you become.&lt;/li&gt;
 &lt;li&gt;The bugs will show up during integration.&lt;/li&gt;
 &lt;li&gt;When something fails, we will fix it.&lt;/li&gt;
 &lt;li&gt;It's not the end of the world, it just takes time and it hurts your motivation.&lt;/li&gt;
&lt;li&gt;And finally, you need a team, for having fun during the creative process, for agility and as a safety net to each other.&lt;/li&gt;
&lt;/ul&gt;

###Photos

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/misc.jpg&quot; alt=&quot;parts&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-0.jpg&quot; alt=&quot;&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-1.jpg&quot; alt=&quot;&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/first-bug.jpg&quot; alt=&quot;Fixing the first bug&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/board-fix.jpg&quot; alt=&quot;Board fix&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/board.jpg&quot; alt=&quot;control board&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-2.jpg&quot; alt=&quot;&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-3.jpg&quot; alt=&quot;&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-4.jpg&quot; alt=&quot;&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/session-1-complete.jpg&quot; alt=&quot;complete&quot;&gt;

&lt;img class=&quot;img-responsive&quot; src=&quot;/img/posts/printer/print.jpg&quot; alt=&quot;first print&quot;&gt;
</description>
				
				<pubDate>Wed, 01 Jul 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/07/01/lessons-learned-from-assembling-a-3d-printer.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/07/01/lessons-learned-from-assembling-a-3d-printer.html</guid>
			</item>
		
			<item>
				<title>Blogging Like a Hacker</title>
				
				
					<description>I don't remember exactly how many blogs I created the past years, but this one feels like the one.
I had one blog on Tumblr and three or four on Wordpress.
Tumblr's brand didn't align with my vision of my blog.
I wanted a truly personal blog.
A blog where I could share my thoughts mainly on technology but at the same time, keep it open to explore other areas.
For example, at some point I might wanted to blog about music or personal thoughts on a viral and important matter, you name it. Tumblr wasn't the right place for this purpose, because its brand is purely recreational. On the other hand, Wordpress has a more elastic brand. You can use it for whatever purpose you want, but it was too complicated for me and of course the produced code was too heavy, given how little control you have on the generated code. Moreover, migrating a blog was a pain in the ass. After creating and deleting several blogs, I gave up Wordpress. One week ago a &lt;a href=&quot;https://dkotzias.com&quot; target=&quot;_blank&quot;&gt;friend&lt;/a&gt; told me about &lt;a href=&quot;https://www.jekyllrb.com&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; and I decided to give it a try.
An easy decision, given my zero options at the time.

First of all, its origins are in GitHub, a company that I really appreciate and support.
My personal opinion about GitHub is that they changed our field, by transforming the day-to-day interaction with the best version control system into a UX.
Git is complicated but powerful and GitHub's client Apps for &lt;a href=&quot;https://mac.github.com&quot; target=&quot;_blank&quot;&gt;Mac&lt;/a&gt; and &lt;a href=&quot;https://windows.github.com&quot; target=&quot;_blank&quot;&gt;Windows&lt;/a&gt; made it easy and playful to use.
Also their &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot;&gt;web access&lt;/a&gt; promoted coding as a social network, which was ingenious because it worked as a motivation for people to open-source their work and help others.
Back to Jekyll. Yes, reading that it was created in GitHub was more than enough for me to invest my time on it.
And yes, Jekyll needs some time invested on it, given that it's not a CMS, which means that you have to get your hands dirty.

I started from the official &lt;a href=&quot;https://jekyllrb.com/docs/home&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;,
but soon I realized that it would be more fun to not reinvent the wheel,
but fork an existing open-source blog that I liked.
I searched a few themes, chose the &lt;a href=&quot;https://kirbyt.github.io/timeline-jekyll-theme&quot; target=&quot;_blank&quot;&gt;Timeline&lt;/a&gt; and started playing with it.
Timeline is a mashup of the popular &lt;a href=&quot;https://y7kim.github.io/agency-jekyll-theme/&quot; target=&quot;_blank&quot;&gt;Agency&lt;/a&gt; and &lt;a href=&quot;https://jeromelachaud.github.io/grayscale-theme/&quot; target=&quot;_blank&quot;&gt;Grayscale&lt;/a&gt; themes.
Most Jekyll themes are sleek and &lt;strike&gt;mobile first&lt;/strike&gt; responsive,
but Timeline won me because of the &lt;strike&gt;Career page&lt;/strike&gt; Timeline (duh).
Also I loved the white on black text, because it improves significantly the reading experience and my vision was to create a website/blog that people would enjoy to spend a few minutes on it without getting tired.
The first day that I spent on Jekyll was to understand how it works and the result was to just replace existing placeholders and variables to create my Timeline. But that wasn't enough, I needed a blog. I couldn't spend more than one day at the time, so I just published it for free on &lt;a href=&quot;https://pages.github.com&quot; target=&quot;_blank&quot;&gt;GitHub Pages&lt;/a&gt;. I hadn't used GitHub Pages for a while, so I had forgotten how awesome it is to just push your changes to origin/master and get your website deployed with them out of the box. Also I was thrilled that I was able to use Emacs as my editor. My geek inside me was overwhelmed. The only downside with GitHub Pages, is that they don't allow dynamic pages (yes, Jekyll is producing static pages!), for security reasons.

One week later, I was able to spend one more day on it. The goal was to somehow integrate the Blogging feature in the Timeline theme, but pretty soon I realized that Timeline's functionality was hijacking the Blogging capabilities of Jekyll, because it was rendering the posts as timeline events. Bummer. This feature was one of the two main reasons that I picked Timeline, but lacking the Blog feature was not an option, I wanted it badly. I tried to see if I could manipulate Jekyll in order to support both the Timeline and Blog features, but in order to manage that I had to hack Jekyll and I had only one day to spend on this. So I ripped off Timeline's generated HTML code into a file and started reading how to use Jekyll's API to create a Blog. This &lt;a href=&quot;https://erjjones.github.io/blog/How-I-built-my-blog-in-one-day&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; was my most valuable resource. After a while and a &lt;a href=&quot;https://github.com/kirbyt/timeline-jekyll-theme/pull/2&quot; target=&quot;_blank&quot;&gt;bug fix&lt;/a&gt; on Timeline I was there. I opened the website from my phone to see how it renders and it was rendering as expected (thanks to Bootstrap).
By the way, I fixed a bug on my navigation bar from my bed, using my phone, by editing a source file on GitHub.
How awesome is that?

Writing blog posts using &lt;a href=&quot;https://daringfireball.net/projects/markdown&quot; target=&quot;_blank&quot;&gt;Markdown&lt;/a&gt; and Emacs is exciting and keeping my draft posts on git &lt;a href=&quot;https://github.com/PanosSakkos/panossakkos.github.io/tree/blogging-like-a-hacker&quot; target=&quot;_blank&quot;&gt;branches&lt;/a&gt; is kick-ass. The next logical step is to make the ripped off Timeline HTML autogenerated, by defining custom Jekyll variables and then open-source it.

    git commit -a -m &quot;Finished post&quot;
    git checkout master
    git merge _blogging-like-a-hacker
    git push origin master:master

:)

Edit: I tend to [keep](https://panossakkos.github.io/tech/2015/07/05/personal-jekyll-theme.html) my promises
</description>
				
				<pubDate>Sat, 27 Jun 2015 00:00:00 +0530</pubDate>
				<link>https://sskhrnwbie.github.io/tech/2015/06/27/blogging-like-a-hacker.html</link>
				<guid isPermaLink="true">https://sskhrnwbie.github.io/tech/2015/06/27/blogging-like-a-hacker.html</guid>
			</item>
		
	</channel>
</rss>
